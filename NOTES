In:
  -> Make Google::InfoWindow shareable between map and marker! update #open_info_window on both Map and Marker
     Google::InfoWindow must also bring conveniencein the form of Google::InfoWindow#hide, Google::InfoWindow#show
     Google::InfoWindow#toggle

  -> API key? Default to localhost
     Support yaml files for map keys, so in one place and no need to edit dev.rb or prod.rb

-> Document eschaton

-> script/generate map -- must write some stuff out on how to start

== Intuitive Marker updates
  -> If :draggable logic must be added to 'hide' the info window when the marker is 'picked up'
     Perhaps even detecting if an info window was open and then 'showing' it again when the marker is 'dropped'
  -> If :draggable and a tooltip is used, when the marker is picked up the tooltip should also rise(increase the padding), then its dragged the tooltip must
     drag with the marker and when the marker is dropped it should return to its normal location(decrease the padding)

== Eschaton general

  -> When in ruby and ruby objects are availble return those, otherwise return their javascript equivalents in the form of strings.
     i.e if map.center = Google::Location return that, otherwise return 'map.getCenter()'. This will make sure "predictable" results occur when the generated
     script executes

  -> Eschaton seems to be loading up *twice* during startup in rails 2.1, investigate!
 
=== Eschaton dev
 -> Make Google::InfoWindow shareable between map and marker! update #open_info_window on both Map and Marker
 
 -> #if_google_compatible should be merged into #google_map_script and #google_map_script should *always* be used.
 
 -> Move Pane code into eschaton.js and metafy as need be!
 
 -> See Google::Circle and refactor into various 'shape' classes.
   Rename draw_circle in eschaton.js to 'draw_shape' and metafy as need be!
   
 -> open_info_window must support string location, as update_info_window using map.getInfoWindow.getPoint()...
   include_url must be able to interpolate this string value as it does with the symbol.
     
 -> Implement Line#undo_last_vertex

 -> Eschaton generator to generate eschaton plugins in the 'lib' folder.

=== Escahton Enhancments
 -> map.add_lines :from => location, :to => [other_location, another_location], :thickness => 10, :opacity => 0.7