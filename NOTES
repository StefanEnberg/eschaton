N.B:
  -> In some places the 'map' variable is directly referenced and will cause issues if there are two maps
     or a map with a name other than map. Suggest making the Google::Map avaible globally through some interface.
     
  -> Write "Eschaton showcase" to show all samples code and allow for some form of user contribution.  
  
  -> rake update should not delete the parent plugin directory but rather its contents, then the repo should
     be cloned into that dir(is this possible with git??)
    
  -> Track the "maps" that the user has created by keeping a hash by name, the main map being called "main".
     Other objects can then refer to these maps using the abstraction
In:
  -> Make Google::InfoWindow shareable between map and marker! update #open_info_window on both Map and Marker
     Google::InfoWindow must also bring convenience the form of Google::InfoWindow#hide, Google::InfoWindow#show
     Google::InfoWindow#toggle

  -> * API key? Default to localhost
     * Support yaml files for map keys, so in one place and no need to edit dev.rb or prod.rb

== Intuitive Marker updates
  -> The :draggable logic for 'hiding' the info window when the marker is 'picked up'
     can perhaps detect if an info window was open and then 'show' it again when the marker is 'dropped',
     this seems intuitive

== Eschaton general

  -> When in ruby and ruby objects are availble return those, otherwise return their javascript equivalents in the form of strings.
     i.e if map.center = Google::Location return that, otherwise return 'map.getCenter()'. This will make sure "predictable" results occur when the generated
     script executes

  -> Eschaton seems to be loading up *twice* during startup in rails 2.1, investigate!
 
=== Eschaton dev
 -> Make Google::InfoWindow shareable between map and marker! update #open_info_window on both Map and Marker
 
 -> #if_google_compatible should be merged into #google_map_script and #google_map_script should *always* be used.
    There should never be a need to use it outside of this context.

 -> Move Pane code into eschaton.js and metafy as need be!
 
 -> See Google::Circle and refactor into various 'shape' classes.
    Rename draw_circle in eschaton.js to 'draw_shape' and metafy as need be!
   
 -> open_info_window must support string location, as update_info_window using map.getInfoWindow.getPoint()...
    include_url must be able to interpolate this string value as it does with the symbol.

 -> Eschaton generator to generate eschaton plugins in the 'lib' folder.

=== Eschaton Enhancments
 -> map.add_lines :from => location, :to => [other_location, another_location], :thickness => 10, :opacity => 0.7
 
 -> Introdude Google::Event, a way to abstract events and to optimize how code is attached to events.
 
 -> * Extract Google::Tooltip from marker and allo a tooltip to be added to any overlay including lines and polygons.
    * Tooltips should also be allowed to be assigned a specific css class, i.e :css_class => :updating
 
 -> Map#add_geo_rss(url) : Render a geo rss feed on the map
 
 -> Implement Line#undo_last_vertex
 
 -> Keyboard navigation needs focus on div, sort this, how ???
 
=== Higher level ideas, trippy shit
 -> Have a concept of 'marker' groups, in which you can add markers to these groups and perform actions on the groups.
    Say we have two groups, 'Wikipedia' and 'Flickr' and marker in each group. We could then say stuff like
    wikipedia_group.show && flickr_group.hide or wikipedia_group.hide && flickr_group.show.
    
    Basically to get a handle of groups of markers and perform actions on them.
    Perhpas we could treat all overlays like this(markers, lines etc)

 -> Abstract the concept of a "route", have the abilty to add "Waypoints" to the route that can have a marker, tooltip and info 
    window etc. This should be an eschaton plugin
 
 -> Integrate with google spreadsheets so that spreadsheet data with a 'name' and 'location' column can be shown on the map,
    that would be slick to show people!