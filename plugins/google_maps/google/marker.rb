module Google
  
  # Represents a marker that can be added to a Map. If a method or event is not documented here please 
  # see googles online[[http://code.google.com/apis/maps/documentation/reference.html#GMarker] docs for details.
  #
  # You will most likely use click and open_info_window to get some basic functionality going.
  #
  # Examples:
  #
  #  Google::Marker.new(:location => {:latitude => -34, :longitude => 18.5})
  #
  #  location = Google::Location.new(:latitude => -34, :longitude => 18.5)
  #  Google::Marker.new(:location => location)
  #
  #  Google::Marker.new(:location => :existing_location)  
  class Marker < MapObject
    attr_accessor :icon
    attr_reader :location
    
    # Options:
    # :location:: => Required. An existing variable(represented by a symbol), Location object or hash which indicates where the marker should be placed.
    # :icon::     => Optional. The Icon that should be used for the marker otherwise the default marker icon will be used.
    #
    # See addtional options[http://code.google.com/apis/maps/documentation/reference.html#GMarkerOptions] that are supported.
    def initialize(options = {})
      options.default! :var => 'marker'
      
      super
                  
      if create_var?
        @location = options.extract_and_remove(:location).to_location

        if icon = options.extract_and_remove(:icon)
          self.icon = icon.to_icon
          options[:icon] = self.icon
        end

        self << "#{self.var} = new GMarker(#{self.location}, #{options.to_google_options});"
      end
    end
    
    def change_image(image)
      self << "#{self.var}.setImage('#{image}');"
    end
    
    # Opens a information window on the marker. Either a +url+ or +text+ option can be supplied to place 
    # within the info window.
    #
    # :url::  => Optional. URL is generated by rails #url_for. Supports standard url arguments and javascript variable interpolation.
    # :text:: => Optional. The html content that will be placed inside the info window. 
    def open_info_window(options)
      options.assert_valid_keys :url, :text
      
      if options[:url]
        self.script.get(options[:url]) do |data|
          self << "#{self.var}.openInfoWindow(#{data});"
        end
      else
        self << "#{self.var}.openInfoWindow(#{options[:text].to_js});"
      end
    end
    
    def click(&block)
      self.listen_to :event => :click, &block
    end
    
    def when_drag_starts(&block)
      self.listen_to :event => :dragstart, &block
    end
    
    def when_drag_ends(&block)
      self.listen_to :event => :dragend, :with => [:location] do |*args|
        script = args.first               
        script << "location = #{self.var}.getLatLng();"

        yield *args
      end
    end
    
    def to_marker
      self
    end
    
  end
end