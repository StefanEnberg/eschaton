module Google
  
  # Represents a marker that can be added to a Map, you can also use Map#add_marker. If a method or event is not documented here please 
  # see googles online[http://code.google.com/apis/maps/documentation/reference.html#GMarker] docs for details. See MapObject#listen_to on how to use
  # events not listed on this object.
  #
  # You will most likely use click and open_info_window to get some basic functionality going.
  #
  # ==== Examples:
  #
  #  marker = Google::Marker.new :location => {:latitude => -34, :longitude => 18.5}
  #
  #  marker = Google::Marker.new :location => {:latitude => -34, :longitude => 18.5}, 
  #                              :draggable => true,
  #                              :title => "This is a marker!"
  #
  #  marker = Google::Marker.new :location => {:latitude => -34, :longitude => 18.5},
  #                              :icon => :green_circle #=> "/images/green_circle.png"
  #
  #  marker = Google::Marker.new :location => {:latitude => -34, :longitude => 18.5},
  #                              :icon => '/images/red_dot.gif'
  #
  #  # Using a gravatar
  #  marker = Google::Marker.new :location => {:latitude => -34, :longitude => 18.5},
  #                              :gravatar => 'karadanais@gmail.com'
  #
  #  marker = Google::Marker.new :location => {:latitude => -34, :longitude => 18.5},
  #                              :gravatar => {:email_address => 'karadanais@gmail.com', :size => 50}
  class Marker < MapObject
    attr_accessor :icon
    attr_reader :location
    
    # ==== Options:
    # * +location+ - Required. A Location or whatever Location#new supports which indicates where the marker must be placed on the map.
    # * +icon+ - Optional. The Icon that should be used for the marker otherwise the default marker icon will be used.
    # * +gravatar+ - Optional. Uses a gravatar as the icon. If a string is supplied it will be used for the +email_address+ 
    #   option, see Gravatar#new for other valid options.
    #
    # See addtional options[http://code.google.com/apis/maps/documentation/reference.html#GMarkerOptions] that are supported.
    def initialize(options = {})
      options.default! :var => 'marker'

      super

      if create_var?
        @location = options.extract_and_remove(:location).to_location
        #@location = OptionsHandler.to_location!(options) #:extract => true

        self.icon = if icon = options.extract_and_remove(:icon)
                      icon.to_icon
                    elsif gravatar = options.extract_and_remove(:gravatar)
                      gravatar.to_gravatar_icon  
                    end

        options[:icon] = self.icon if self.icon
        
        self << "#{self.var} = new GMarker(#{self.location}, #{options.to_google_options});"
      end
    end

    # Opens a information window on the marker using either +url+, +partial+ or +text+ options as content.
    #
    # ==== Options:
    # * +url+ - Optional. URL is generated by rails #url_for. Supports standard url arguments and javascript variable interpolation.
    # * +partial+ - Optional. Supports the same form as rails +render+ for partials, content of the rendered partial will be 
    #   placed inside the info window.
    # * +text+ - Optional. The html content that will be placed inside the info window.
    def open_info_window(options)
      if options[:url]
        self.script.get(options[:url]) do |data|
          self << "#{self.var}.openInfoWindow(#{data});"
        end
      else
        text = if options[:partial]
                 Eschaton.current_view.render options
               else
                 options[:text]
               end

        self << "#{self.var}.openInfoWindow(#{text.to_js});"
      end
    end

    # If called with a block it will attach the block to the "click" event of the marker.
    # If +info_window_options+ are supplied an info window will be opened with those options and the block will be ignored.
    def click(info_window_options = nil, &block) # :yields: script
      if info_window_options
        self.click do
          self.open_info_window info_window_options
        end
      elsif block_given?
        self.listen_to :event => :click, &block        
      end
    end

    # This event is fired when the marker is "picked up" at the beginning of being dragged.
    #
    # ==== Yields:
    # * +script+ - A JavaScriptGenerator to assist in generating javascript or interacting with the DOM.    
    def when_picked_up(&block)
      self.listen_to :event => :dragstart, &block
    end
    
    # This event is fired when the marker is "dropped" after being dragged.
    #
    # ==== Yields:
    # * +script+ - A JavaScriptGenerator to assist in generating javascript or interacting with the DOM.
    # * +drop_location+ - The location on the map where the marker was dropped.
    def when_dropped(&block)
      self.listen_to :event => :dragend do |script|          
        script << "drop_location = #{self.var}.getLatLng();"

        yield script, :drop_location
      end
    end
   
    # Opens an info window that contains a blown-up view of the map around this marker.
    #
    # ==== Options:
    # * +zoom_level+ - Optional. Sets the blowup to a particular zoom level.
    # * +map_type+ - Optional. Set the type of map shown in the blowup.
    def show_map_blowup(options = {})
     options[:map_type] = options[:map_type].to_map_type if options[:map_type]

     self << "#{self.var}.showMapBlowup(#{options.to_google_options});" 
    end
    
    # Changes the foreground icon of the marker to the given +image+. Note neither the print image nor the shadow image are adjusted.
    #
    #  marker.change_icon :green_cicle #=> "/images/green_circle.png"
    #  marker.change_icon "/images/red_dot.gif"
    def change_icon(image)
      self << "#{self.var}.setImage(#{image.to_image.to_js});"
    end
    
    def to_marker
      self
    end
  
  end
end